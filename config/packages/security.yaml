security:
    encoders:
        App\Entity\User:
            algorithm: argon2i

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_refresh:
            pattern:  ^/api/token/refresh
            methods: [POST]
            stateless: true
            anonymous: true

        # Used by the mobile app to know if this is an heimdall server
        api_ping:
            pattern: ^/api/$
            anonymous: true


        web:
            anonymous: ~
            guard:
                authenticators:
                    - App\Security\Authenticator
            logout:
                path: app_logout
                target: app_login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # API
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST] }
        - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_FULLY, methods: [DELETE] }
        - { path: ^/api/$, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # WEB
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: [ROLE_ADMIN, ROLE_STUDENT, ROLE_TEACHER] }